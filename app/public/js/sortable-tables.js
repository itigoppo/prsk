/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/sortable-tables.js":
/*!*****************************************!*\
  !*** ./resources/js/sortable-tables.js ***!
  \*****************************************/
/***/ (() => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nwindow.addEventListener('load', function () {\n  SortableTables();\n});\n\nvar SortableTables = function SortableTables() {\n  var getTables = document.getElementsByTagName('table');\n\n  var _iterator = _createForOfIteratorHelper(getTables),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var table = _step.value;\n\n      if (table.classList.contains('table-sort')) {\n        activateSortable(table);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\nvar activateSortable = function activateSortable(table) {\n  if (table.getElementsByTagName('thead').length === 0) {\n    return false;\n  }\n\n  if (table.getElementsByTagName('tbody').length === 0) {\n    return false;\n  }\n\n  var tableBody = table.querySelector('tbody');\n  var tableHeader = table.querySelector('thead');\n  var headerColumns = tableHeader.querySelectorAll('th');\n  headerColumns.forEach(function (th, index) {\n    if (!th.classList.contains('disable-sort')) {\n      th.classList.add('sort-arrow');\n      eachColumns(table, tableBody, index, th);\n    }\n  });\n};\n\nvar eachColumns = function eachColumns(table, tableBody, columnIndex, th) {\n  th.addEventListener('click', function (compareFn) {\n    var result = {};\n    var columnData = [];\n    var colSpanData = {};\n    var colSpanSum = {};\n    var visibleTableRows = Array.prototype.filter.call(tableBody.querySelectorAll('tr'), function (tr) {\n      return tr.style.display !== 'none';\n    });\n    var isDataAttribute = th.classList.contains('data-sort');\n\n    if (isDataAttribute) {\n      var _iterator2 = _createForOfIteratorHelper(visibleTableRows.entries()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              i = _step2$value[0],\n              tr = _step2$value[1];\n\n          var dataAttributeTd = tr.querySelectorAll('td').item(columnIndex).dataset.sort;\n          columnData.push(\"\".concat(dataAttributeTd, \"#\").concat(i));\n          result[columnData[i]] = tr.innerHTML;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    table.querySelectorAll('th').forEach(function (th, index) {\n      colSpanData[index] = th.colSpan;\n      if (index === 0) colSpanSum[index] = th.colSpan;else colSpanSum[index] = colSpanSum[index - 1] + th.colSpan;\n    });\n\n    var _iterator3 = _createForOfIteratorHelper(visibleTableRows.entries()),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n            _i2 = _step3$value[0],\n            _tr = _step3$value[1];\n\n        var tdTextContent = _tr.querySelectorAll('td').item(colSpanData[columnIndex] === 1 ? colSpanSum[columnIndex] - 1 : colSpanSum[columnIndex] - colSpanData[columnIndex]).textContent;\n\n        if (tdTextContent.length === 0) {\n          tdTextContent = '';\n        }\n\n        if (tdTextContent.trim() !== '') {\n          if (!isDataAttribute) {\n            columnData.push(\"\".concat(tdTextContent, \"#\").concat(_i2));\n            result[\"\".concat(tdTextContent, \"#\").concat(_i2)] = _tr.innerHTML;\n          }\n        } else {\n          columnData.push(\"!EMPTY!CONTENT!#\".concat(_i2));\n          result[\"!EMPTY!CONTENT!#\".concat(_i2)] = _tr.innerHTML;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var sortType = 'desc';\n\n    if (th.classList.contains('sort-arrow-down')) {\n      sortType = 'asc';\n    } else if (th.classList.contains('sort-arrow-up')) {\n      sortType = 'desc';\n    }\n\n    resetArrowStyle(table, columnIndex, sortType);\n\n    if (sortType === 'desc') {\n      columnData.sort(sortDesc);\n    } else {\n      columnData.sort(sortAsc);\n    }\n\n    var _iterator4 = _createForOfIteratorHelper(visibleTableRows.entries()),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n            _i3 = _step4$value[0],\n            _tr2 = _step4$value[1];\n\n        _tr2.innerHTML = result[columnData[_i3]];\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  });\n};\n\nvar resetArrowStyle = function resetArrowStyle(table, currentIndex, sortType) {\n  table.querySelectorAll('th').forEach(function (th, index) {\n    if (!th.classList.contains('disable-sort')) {\n      if (th.classList.contains('sort-arrow-down')) {\n        th.classList.remove('sort-arrow-down');\n      }\n\n      if (th.classList.contains('sort-arrow-up')) {\n        th.classList.remove('sort-arrow-up');\n      }\n\n      if (!th.classList.contains('sort-arrow')) {\n        th.classList.add('sort-arrow');\n      }\n\n      if (index === currentIndex) {\n        th.classList.remove('sort-arrow');\n\n        if (sortType === 'desc') {\n          th.classList.add('sort-arrow-down');\n        } else if (sortType === 'asc') {\n          th.classList.add('sort-arrow-up');\n        }\n      }\n    }\n  });\n};\n\nvar sortAsc = function sortAsc(a, b) {\n  if (a.includes(\"!EMPTY!CONTENT!#\")) {\n    return 1;\n  } else if (b.includes(\"!EMPTY!CONTENT!#\")) {\n    return -1;\n  } else {\n    return a.localeCompare(b, navigator.languages[0] || navigator.language, {\n      numeric: true,\n      ignorePunctuation: true\n    });\n  }\n};\n\nvar sortDesc = function sortDesc(a, b) {\n  return sortAsc(b, a);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/sortable-tables.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/sortable-tables.js"]();
/******/ 	
/******/ })()
;